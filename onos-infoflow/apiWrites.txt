<org.onosproject.net.behaviour.DomainIntentConfigurable: org.onosproject.net.domain.DomainIntent sumbit(org.onosproject.net.domain.DomainIntent)>
<org.onosproject.net.behaviour.DomainIntentConfigurable: org.onosproject.net.domain.DomainIntent remove(org.onosproject.net.domain.DomainIntent)>
<org.onosproject.net.config.NetworkConfigService: org.onosproject.net.config.Config addConfig(java.lang.Object,java.lang.Class)>
<org.onosproject.net.config.NetworkConfigService: org.onosproject.net.config.Config applyConfig(java.lang.Object,java.lang.Class,com.fasterxml.jackson.databind.JsonNode)>
<org.onosproject.net.config.NetworkConfigService: org.onosproject.net.config.Config applyConfig(java.lang.String,java.lang.Object,java.lang.String,com.fasterxml.jackson.databind.JsonNode)>
<org.onosproject.net.config.NetworkConfigService: void removeConfig(java.lang.Object,java.lang.Class)>
<org.onosproject.net.config.NetworkConfigService: void removeConfig(java.lang.String,java.lang.Object,java.lang.String)>
<org.onosproject.net.config.NetworkConfigService: void removeConfig(java.lang.Object)>
<org.onosproject.net.config.NetworkConfigService: void removeConfig()>
<org.onosproject.net.domain.DomainIntentService: void sumbit(org.onosproject.net.domain.DomainIntentOperations)>
<org.onosproject.net.driver.DriverService: org.onosproject.net.driver.DriverHandler createHandler(org.onosproject.net.DeviceId,java.lang.String[])>
<org.onosproject.net.edge.EdgePortService: void emitPacket(java.nio.ByteBuffer,java.util.Optional)>
<org.onosproject.net.edge.EdgePortService: void emitPacket(org.onosproject.net.DeviceId,java.nio.ByteBuffer,java.util.Optional)>
<org.onosproject.net.flow.FlowRuleService: void applyFlowRules(org.onosproject.net.flow.FlowRule[])>
<org.onosproject.net.flow.FlowRuleService: void purgeFlowRules(org.onosproject.net.DeviceId)>
<org.onosproject.net.flow.FlowRuleService: void removeFlowRules(org.onosproject.net.flow.FlowRule[])>
<org.onosproject.net.flow.FlowRuleService: void removeFlowRulesById(org.onosproject.core.ApplicationId)>
<org.onosproject.net.flow.FlowRuleService: void apply(org.onosproject.net.flow.FlowRuleOperations)>
<org.onosproject.net.flowobjective.FlowObjectiveService: void filter(org.onosproject.net.DeviceId,org.onosproject.net.flowobjective.FilteringObjective)>
<org.onosproject.net.flowobjective.FlowObjectiveService: void forward(org.onosproject.net.DeviceId,org.onosproject.net.flowobjective.ForwardingObjective)>
<org.onosproject.net.flowobjective.FlowObjectiveService: void next(org.onosproject.net.DeviceId,org.onosproject.net.flowobjective.NextObjective)>
<org.onosproject.net.flowobjective.FlowObjectiveService: void apply(org.onosproject.net.DeviceId,org.onosproject.net.flowobjective.Objective)>
<org.onosproject.net.flowobjective.FlowObjectiveService: void clearQueue()>
<org.onosproject.net.group.GroupService: void addGroup(org.onosproject.net.group.GroupDescription)>
<org.onosproject.net.group.GroupService: void addBucketsToGroup(org.onosproject.net.DeviceId,org.onosproject.net.group.GroupKey,org.onosproject.net.group.GroupBuckets,org.onosproject.net.group.GroupKey,org.onosproject.core.ApplicationId)>
<org.onosproject.net.group.GroupService: void removeBucketsFromGroup(org.onosproject.net.DeviceId,org.onosproject.net.group.GroupKey,org.onosproject.net.group.GroupBuckets,org.onosproject.net.group.GroupKey,org.onosproject.core.ApplicationId)>
<org.onosproject.net.group.GroupService: void setBucketsForGroup(org.onosproject.net.DeviceId,org.onosproject.net.group.GroupKey,org.onosproject.net.group.GroupBuckets,org.onosproject.net.group.GroupKey,org.onosproject.core.ApplicationId)>
<org.onosproject.net.group.GroupService: void purgeGroupEntries(org.onosproject.net.DeviceId)>
<org.onosproject.net.group.GroupService: void purgeGroupEntries()>
<org.onosproject.net.group.GroupService: void removeGroup(org.onosproject.net.DeviceId,org.onosproject.net.group.GroupKey,org.onosproject.core.ApplicationId)>
<org.onosproject.net.host.HostService: void startMonitoringIp(org.onlab.packet.IpAddress)>
<org.onosproject.net.host.HostService: void stopMonitoringIp(org.onlab.packet.IpAddress)>
<org.onosproject.net.intent.IntentService: void submit(org.onosproject.net.intent.Intent)>
<org.onosproject.net.intent.IntentService: void withdraw(org.onosproject.net.intent.Intent)>
<org.onosproject.net.intent.IntentService: void purge(org.onosproject.net.intent.Intent)>
<org.onosproject.net.intent.IntentService: void addPending(org.onosproject.net.intent.IntentData)>
<org.onosproject.net.mcast.MulticastRouteService: void add(org.onosproject.net.mcast.McastRoute)>
<org.onosproject.net.mcast.MulticastRouteService: void remove(org.onosproject.net.mcast.McastRoute)>
<org.onosproject.net.mcast.MulticastRouteService: void addSource(org.onosproject.net.mcast.McastRoute,org.onosproject.net.ConnectPoint)>
<org.onosproject.net.mcast.MulticastRouteService: void addSink(org.onosproject.net.mcast.McastRoute,org.onosproject.net.ConnectPoint)>
<org.onosproject.net.mcast.MulticastRouteService: void removeSink(org.onosproject.net.mcast.McastRoute,org.onosproject.net.ConnectPoint)>
<org.onosproject.net.meter.MeterService: org.onosproject.net.meter.Meter submit(org.onosproject.net.meter.MeterRequest)>
<org.onosproject.net.meter.MeterService: void withdraw(org.onosproject.net.meter.MeterRequest,org.onosproject.net.meter.MeterId)>
<org.onosproject.net.meter.MeterService: org.onosproject.net.meter.MeterId allocateMeterId(org.onosproject.net.DeviceId)>
<org.onosproject.net.meter.MeterService: void freeMeterId(org.onosproject.net.DeviceId,org.onosproject.net.meter.MeterId)>
<org.onosproject.net.packet.PacketContext: void send()>
<org.onosproject.net.packet.PacketContext: boolean block()>
<org.onosproject.net.packet.PacketService: void addProcessor(org.onosproject.net.packet.PacketProcessor,int)>
<org.onosproject.net.packet.PacketService: void removeProcessor(org.onosproject.net.packet.PacketProcessor)>
<org.onosproject.net.packet.PacketService: void requestPackets(org.onosproject.net.flow.TrafficSelector,org.onosproject.net.packet.PacketPriority,org.onosproject.core.ApplicationId)>
<org.onosproject.net.packet.PacketService: void requestPackets(org.onosproject.net.flow.TrafficSelector,org.onosproject.net.packet.PacketPriority,org.onosproject.core.ApplicationId,java.util.Optional)>
<org.onosproject.net.packet.PacketService: void cancelPackets(org.onosproject.net.flow.TrafficSelector,org.onosproject.net.packet.PacketPriority,org.onosproject.core.ApplicationId)>
<org.onosproject.net.packet.PacketService: void cancelPackets(org.onosproject.net.flow.TrafficSelector,org.onosproject.net.packet.PacketPriority,org.onosproject.core.ApplicationId,java.util.Optional)>
<org.onosproject.net.packet.PacketService: void emit(org.onosproject.net.packet.OutboundPacket)>
<org.onosproject.net.host.HostProviderService: void hostDetected(org.onosproject.net.HostId,org.onosproject.net.host.HostDescription,boolean)>
<org.onosproject.net.host.HostProviderService: void hostVanished(org.onosproject.net.HostId)>
<org.onosproject.net.host.HostProviderService: void removeIpFromHost(org.onosproject.net.HostId,org.onlab.packet.IpAddress)>
<org.onosproject.net.host.HostProviderService: void addLocationToHost(org.onosproject.net.HostId,org.onosproject.net.HostLocation)>
<org.onosproject.net.host.HostProviderService: void removeLocationFromHost(org.onosproject.net.HostId,org.onosproject.net.HostLocation)>
<org.onosproject.net.host.HostProviderService: org.onlab.packet.MacAddress addPendingHostLocation(org.onosproject.net.HostId,org.onosproject.net.ConnectPoint,org.onosproject.net.host.ProbeMode)>
<org.onosproject.net.flow.FlowRuleProviderService: void flowRemoved(org.onosproject.net.flow.FlowEntry)>
<org.onosproject.net.flow.FlowRuleProviderService: void pushFlowMetrics(org.onosproject.net.DeviceId,java.lang.Iterable)>
<org.onosproject.net.flow.FlowRuleProviderService: void pushFlowMetricsWithoutFlowMissing(org.onosproject.net.DeviceId,java.lang.Iterable)>
<org.onosproject.net.flow.FlowRuleProviderService: void pushTableStatistics(org.onosproject.net.DeviceId,java.util.List)>
<org.onosproject.net.flow.FlowRuleProviderService: void batchOperationCompleted(long,org.onosproject.net.flow.CompletedBatchOperation)>
<org.onosproject.net.topology.TopologyProviderService: void topologyChanged(org.onosproject.net.topology.GraphDescription,java.util.List)>
<org.onosproject.net.device.DeviceProviderService: void deviceConnected(org.onosproject.net.DeviceId,org.onosproject.net.device.DeviceDescription)>
<org.onosproject.net.device.DeviceProviderService: void deviceDisconnected(org.onosproject.net.DeviceId)>
<org.onosproject.net.device.DeviceProviderService: void updatePorts(org.onosproject.net.DeviceId,java.util.List)>
<org.onosproject.net.device.DeviceProviderService: void deletePort(org.onosproject.net.DeviceId,org.onosproject.net.device.PortDescription)>
<org.onosproject.net.device.DeviceProviderService: void portStatusChanged(org.onosproject.net.DeviceId,org.onosproject.net.device.PortDescription)>
<org.onosproject.net.device.DeviceProviderService: void receivedRoleReply(org.onosproject.net.DeviceId,org.onosproject.net.MastershipRole,org.onosproject.net.MastershipRole)>
<org.onosproject.net.device.DeviceProviderService: void updatePortStatistics(org.onosproject.net.DeviceId,java.util.Collection)>
<org.onosproject.net.group.GroupProviderService: void groupOperationFailed(org.onosproject.net.DeviceId,org.onosproject.net.group.GroupOperation)>
<org.onosproject.net.group.GroupProviderService: void pushGroupMetrics(org.onosproject.net.DeviceId,java.util.Collection)>
<org.onosproject.net.group.GroupProviderService: void notifyOfFailovers(java.util.Collection)>
<org.onosproject.net.link.LinkProviderService: void linkDetected(org.onosproject.net.link.LinkDescription)>
<org.onosproject.net.link.LinkProviderService: void linkVanished(org.onosproject.net.link.LinkDescription)>
<org.onosproject.net.link.LinkProviderService: void linksVanished(org.onosproject.net.ConnectPoint)>
<org.onosproject.net.link.LinkProviderService: void linksVanished(org.onosproject.net.DeviceId)>
<org.onosproject.net.meter.MeterProviderService: void meterOperationFailed(org.onosproject.net.meter.MeterOperation,org.onosproject.net.meter.MeterFailReason)>
<org.onosproject.net.meter.MeterProviderService: void pushMeterMetrics(org.onosproject.net.DeviceId,java.util.Collection)>
<org.onosproject.net.meter.MeterProviderService: void pushMeterFeatures(org.onosproject.net.DeviceId,org.onosproject.net.meter.MeterFeatures)>
<org.onosproject.net.meter.MeterProviderService: void deleteMeterFeatures(org.onosproject.net.DeviceId)>
<org.onosproject.net.packet.PacketProviderService: void processPacket(org.onosproject.net.packet.PacketContext)>
<org.onosproject.net.host.HostProbingProviderService: org.onlab.packet.MacAddress addProbingHost(org.onosproject.net.Host,org.onosproject.net.ConnectPoint,org.onosproject.net.host.ProbeMode,org.onlab.packet.MacAddress,int)>
<org.onosproject.net.host.HostProbingProviderService: void removeProbingHost(org.onlab.packet.MacAddress)>
